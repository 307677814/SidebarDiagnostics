<win:DPIAwareWindow
        x:Class="SidebarDiagnostics.Settings"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
        xmlns:local="clr-x:Namespace:SidebarDiagnostics"
        xmlns:monitor="clr-namespace:SidebarDiagnostics.Monitoring"
        xmlns:convert="clr-namespace:SidebarDiagnostics.Converters"
        xmlns:win="clr-namespace:SidebarDiagnostics.Windows"
        mc:Ignorable="d"
        Loaded="Window_Loaded"
        Closed="Window_Closed"
        Title="Sidebar Settings"
        Icon="Settings.ico"
        Width="420"
        SizeToContent="Height"
        ShowMaximize="False"
        WindowStartupLocation="CenterScreen"
        Style="{StaticResource FlatWindowStyle}">
    <Window.Resources>
        <convert:BoolInverseConverter x:Key="BoolInverseConverter" />
        <convert:IntToStringConverter x:Key="IntConverter" />
        <convert:HotkeyToStringConverter x:Key="HotkeyConverter" />
    </Window.Resources>
    <DockPanel LastChildFill="True">
        <StackPanel DockPanel.Dock="Bottom" Style="{StaticResource WindowButtons_SM}">
            <Button Content="Save" Click="SaveButton_Click" />
            <Button Content="Apply" IsEnabled="{Binding Path=IsChanged, Mode=OneWay}" Click="ApplyButton_Click" />
            <Button Click="CloseButton_Click">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource NeutralButton_SM}">
                        <Setter Property="Content" Value="Close" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsChanged, Mode=OneWay}" Value="True">
                                <Setter Property="Content" Value="Cancel" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
        <TabControl Style="{StaticResource SettingTab}">
            <TabItem Header="General">
                <Grid Style="{StaticResource SettingGrid}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Grid.Column="0" Grid.Row="0" Content="Dock" />
                    <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding Path=DockEdgeItems}" SelectedValue="{Binding Path=DockEdge, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Which edge the sidebar will dock to." />

                    <Label Grid.Column="0" Grid.Row="1" Content="Screen" />
                    <ComboBox VerticalAlignment="Center" Grid.Column="1" Grid.Row="1" ItemsSource="{Binding Path=ScreenItems}" DisplayMemberPath="Text" SelectedValuePath="Index" SelectedValue="{Binding Path=ScreenIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Which screen the sidebar will be on." />

                    <Label Grid.Column="0" Grid.Row="2" Content="High DPI Support" />
                    <CheckBox Grid.Column="1" Grid.Row="2" IsChecked="{Binding Path=HighDPISupport, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Enables support for 4K and high DPI monitors." />

                    <Label Grid.Column="0" Grid.Row="3" Content="Reserve Space" />
                    <CheckBox Grid.Column="1" Grid.Row="3" IsChecked="{Binding Path=UseAppBar, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Reserves space in the work area for the sidebar." />

                    <Label Grid.Column="0" Grid.Row="4" Content="Always On Top" />
                    <CheckBox Grid.Column="1" Grid.Row="4" IsChecked="{Binding Path=AlwaysTop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Makes the sidebar always on top of other windows." />

                    <Label Grid.Column="0" Grid.Row="5" Content="Auto Update" />
                    <CheckBox Grid.Column="1" Grid.Row="5" IsChecked="{Binding Path=AutoUpdate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Updates the app automatically." />

                    <Label Grid.Column="0" Grid.Row="6" Content="Run at Startup" />
                    <CheckBox Grid.Column="1" Grid.Row="6" IsChecked="{Binding Path=RunAtStartup, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Runs the app when you first log in." />
                </Grid>
            </TabItem>
            <TabItem Header="Advanced">
                <Grid Style="{StaticResource SettingGrid}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Grid.Column="0" Grid.Row="0" Content="UI Scale" />
                    <DockPanel Grid.Column="1" Grid.Row="0">
                        <TextBox Text="{Binding ElementName=UIScaleSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="UIScaleSlider" Value="{Binding Path=UIScale, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="0.5" Maximum="3.0" TickFrequency="0.1" LargeChange="0.5" ToolTip="Scale of all windows and UI components." />
                    </DockPanel>

                    <Label Grid.Column="0" Grid.Row="1" Content="Horizontal Offset" />
                    <DockPanel Grid.Column="1" Grid.Row="1">
                        <TextBox Text="{Binding ElementName=XOffsetSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="XOffsetSlider" Value="{Binding Path=XOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="-2000" Maximum="2000" TickFrequency="1" LargeChange="1000" ValueChanged="OffsetSlider_ValueChanged" ToolTip="Horizontal offset of the sidebar." />
                    </DockPanel>

                    <Label Grid.Column="0" Grid.Row="2" Content="Vertical Offset" />
                    <DockPanel Grid.Column="1" Grid.Row="2">
                        <TextBox Text="{Binding ElementName=YOffsetSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="YOffsetSlider" Value="{Binding Path=YOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="-2000" Maximum="2000" TickFrequency="1" LargeChange="1000" ValueChanged="OffsetSlider_ValueChanged" ToolTip="Vertical offset of the sidebar." />
                    </DockPanel>

                    <Label Grid.Column="0" Grid.Row="3" Content="Polling Interval" />
                    <DockPanel Grid.Column="1" Grid.Row="3">
                        <TextBox Text="{Binding ElementName=PollingIntervalSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="PollingIntervalSlider" Value="{Binding Path=PollingInterval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="100" Maximum="5000" TickFrequency="100" LargeChange="1000" ToolTip="Time between polling for data in milliseconds." />
                    </DockPanel>

                    <Label Grid.Column="0" Grid.Row="4" Content="Click Through" />
                    <CheckBox Grid.Column="1" Grid.Row="4" x:Name="ClickThroughCheckbox" Checked="ClickThroughCheckbox_Checked" IsChecked="{Binding Path=ClickThrough, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Makes mouse events pass through the window.&#x0a;Note this will prevent any interaction with the sidebar." />

                    <Label Grid.Column="0" Grid.Row="5" Content="Show Tray Icon" />
                    <CheckBox Grid.Column="1" Grid.Row="5" x:Name="ShowTrayIconCheckbox" Unchecked="ShowTrayIconCheckbox_Unchecked" IsChecked="{Binding Path=ShowTrayIcon, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Shows the tray icon in the taskbar.&#x0a;This is sometimes required." />

                    <Label Grid.Column="0" Grid.Row="6" Content="Collapse Menu Bar" />
                    <CheckBox Grid.Column="1" Grid.Row="6" IsChecked="{Binding Path=CollapseMenuBar, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Collapses the menu bar rather than just hiding it.&#x0a;This removes the extra space at the top of the sidebar." />
                </Grid>
            </TabItem>
            <TabItem Header="Customize">
                <Grid Style="{StaticResource SettingGrid}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Grid.Column="0" Grid.Row="0" Content="Sidebar Width" />
                    <DockPanel Grid.Column="1" Grid.Row="0">
                        <TextBox Text="{Binding ElementName=SidebarWidthSlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="SidebarWidthSlider" Value="{Binding Path=SidebarWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="100" Maximum="300" TickFrequency="5" LargeChange="100" ToolTip="Width of the sidebar in pixels." />
                    </DockPanel>
                    
                    <Label Grid.Column="0" Grid.Row="1" Content="Auto Background Color" />
                    <CheckBox Grid.Column="1" Grid.Row="1" IsChecked="{Binding Path=AutoBGColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Sets the background color to your Windows color settings." />

                    <Label Grid.Column="0" Grid.Row="2" Content="Background Color" />
                    <xctk:ColorPicker Grid.Column="1" Grid.Row="2" IsEnabled="{Binding Path=AutoBGColor, Mode=OneWay, Converter={StaticResource BoolInverseConverter}}" SelectedColor="{Binding Path=BGColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Color of the background." />

                    <Label Grid.Column="0" Grid.Row="3" Content="Background Opacity" />
                    <DockPanel Grid.Column="1" Grid.Row="3">
                        <TextBox Text="{Binding ElementName=BGOpacitySlider, Path=Value, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberBox_PreviewTextInput" />
                        <Slider x:Name="BGOpacitySlider" Value="{Binding Path=BGOpacity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Minimum="0.01" Maximum="1.0" LargeChange="0.1" TickFrequency="0.01" ToolTip="Opacity of the background." />
                    </DockPanel>

                    <Label Grid.Column="0" Grid.Row="4" Content="Font Size" />
                    <ComboBox Grid.Column="1" Grid.Row="4" ItemsSource="{Binding Path=FontSettingItems}" DisplayMemberPath="FontSize" SelectedValue="{Binding Path=FontSetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Size of text and icons." />

                    <Label Grid.Column="0" Grid.Row="5" Content="Font Color" />
                    <xctk:ColorPicker Grid.Column="1" Grid.Row="5" SelectedColor="{Binding Path=FontColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Color of text and icons."/>

                    <Label Grid.Column="0" Grid.Row="6" Content="Alert Font Color" />
                    <xctk:ColorPicker Grid.Column="1" Grid.Row="6" SelectedColor="{Binding Path=AlertFontColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Color of alert text."/>

                    <Label Grid.Column="0" Grid.Row="7" Content="Date Format" />
                    <ComboBox Grid.Column="1" Grid.Row="7" ItemsSource="{Binding Path=DateSettingItems}" DisplayMemberPath="Display" SelectedValue="{Binding Path=DateSetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=ShowClock, Mode=OneWay}" ToolTip="Format of the date below the clock." />

                    <Label Grid.Column="0" Grid.Row="8" Content="Show Clock" />
                    <CheckBox Grid.Column="1" Grid.Row="8" IsChecked="{Binding Path=ShowClock, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Shows the clock." />

                    <Label Grid.Column="0" Grid.Row="9" Content="24 Hour Clock" />
                    <CheckBox Grid.Column="1" Grid.Row="9" IsChecked="{Binding Path=Clock24HR, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Path=ShowClock, Mode=OneWay}" ToolTip="Changes the clock's time format to 24 hours." />
                </Grid>
            </TabItem>
            <TabItem Header="Monitors">
                <StackPanel Style="{StaticResource VerticalPanel}">
                    <StackPanel Style="{StaticResource SettingTitle}">
                        <TextBlock Text="Click a row to edit its settings." />
                        <TextBlock Text="Drag a row to change its order." />
                    </StackPanel>
                    <DataGrid ItemsSource="{Binding Path=MonitorConfig, Mode=OneWay}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" Style="{StaticResource MonitorGrid}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="Enabled" HeaderStyle="{StaticResource MonitorGridHeaderCenter}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type monitor:MonitorConfig}">
                                        <CheckBox IsChecked="{Binding Path=Enabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Enables this monitor." />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Monitor" Width="*" HeaderStyle="{StaticResource MonitorGridHeader}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type monitor:MonitorConfig}">
                                        <Label Content="{Binding Path=Name}" VerticalAlignment="Center" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                        <DataGrid.RowDetailsTemplate>
                            <DataTemplate>
                                <Border Style="{StaticResource MonitorDetailsBorder}">
                                    <StackPanel Style="{StaticResource VerticalPanel}">
                                        <ListView ItemsSource="{Binding Path=HardwareOC, Mode=OneWay}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" ItemContainerStyle="{StaticResource MonitorHardwareItem}">
                                            <ListView.View>
                                                <GridView AllowsColumnReorder="False">
                                                    <GridViewColumn Header="Enabled" HeaderContainerStyle="{StaticResource MonitorHardwareHeaderCenter}">
                                                        <GridViewColumn.CellTemplate>
                                                            <DataTemplate DataType="{x:Type monitor:HardwareConfig}">
                                                                <CheckBox IsChecked="{Binding Path=Enabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Enables this hardware. (Double click to change. Known bug.)" Style="{StaticResource MonitorHardwareCheckbox}" />
                                                            </DataTemplate>
                                                        </GridViewColumn.CellTemplate>
                                                    </GridViewColumn>
                                                    <GridViewColumn Header="Hardware" HeaderContainerStyle="{StaticResource MonitorHardwareHeader}" Width="230">
                                                        <GridViewColumn.CellTemplate>
                                                            <DataTemplate DataType="{x:Type monitor:HardwareConfig}">
                                                                <TextBox Text="{Binding Path=Name, Mode=TwoWay}" Style="{StaticResource MonitorHardwareText}" ToolTip="Edit the name of this hardware." />
                                                            </DataTemplate>
                                                        </GridViewColumn.CellTemplate>
                                                    </GridViewColumn>
                                                </GridView>
                                            </ListView.View>
                                        </ListView>
                                        
                                        <ItemsControl ItemsSource="{Binding Path=Params}" Margin="10">
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type monitor:ConfigParam}">
                                                    <ContentControl>
                                                        <ContentControl.Style>
                                                            <Style TargetType="{x:Type ContentControl}">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding TypeString}" Value="System.Boolean">
                                                                        <Setter Property="Content">
                                                                            <Setter.Value>
                                                                                <CheckBox Content="{Binding Path=Name}" IsChecked="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="{Binding Path=Tooltip, Mode=OneTime}" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding TypeString}" Value="System.Int32">
                                                                        <Setter Property="Content">
                                                                            <Setter.Value>
                                                                                <StackPanel>
                                                                                    <Label Content="{Binding Path=Name, Mode=OneTime}" />
                                                                                    <TextBox Text="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IntConverter}}" ToolTip="{Binding Path=Tooltip, Mode=OneTime}" />
                                                                                </StackPanel>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </ContentControl.Style>
                                                        <ContentControl.Resources>
                                                            <Style TargetType="{x:Type CheckBox}">
                                                                <Setter Property="VerticalAlignment" Value="Center" />
                                                                <Setter Property="Margin" Value="0,5" />
                                                            </Style>
                                                            
                                                            <Style TargetType="{x:Type StackPanel}">
                                                                <Setter Property="Orientation" Value="Horizontal" />
                                                                <Setter Property="Margin" Value="0,5" />
                                                                <Style.Resources>
                                                                    <Style TargetType="{x:Type Label}">
                                                                        <Setter Property="VerticalAlignment" Value="Center" />
                                                                        <Setter Property="Margin" Value="0,0,10,0" />
                                                                        <Setter Property="Padding" Value="0" />
                                                                    </Style>
                                                                    <Style TargetType="{x:Type TextBox}">
                                                                        <Setter Property="VerticalAlignment" Value="Center" />
                                                                        <Setter Property="Width" Value="40" />
                                                                        <Setter Property="MaxLines" Value="1" />
                                                                    </Style>
                                                                </Style.Resources>
                                                            </Style>
                                                        </ContentControl.Resources>
                                                    </ContentControl>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Style="{StaticResource VerticalPanel}" />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </DataGrid.RowDetailsTemplate>
                    </DataGrid>
                </StackPanel>
            </TabItem>
            <TabItem Header="Hotkeys">
                <Grid Style="{StaticResource SettingGrid}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="50"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                        <RowDefinition Height="38px"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Label Grid.Column="0" Grid.Row="0" Content="Toggle" />
                    <ToggleButton Grid.Column="1" Grid.Row="0" Click="BindToggle_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="0" Text="{Binding Path=ToggleKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="1" Content="Show" />
                    <ToggleButton Grid.Column="1" Grid.Row="1" Click="BindShow_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="1" Text="{Binding Path=ShowKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="2" Content="Hide" />
                    <ToggleButton Grid.Column="1" Grid.Row="2" Click="BindHide_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="2" Text="{Binding Path=HideKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="3" Content="Reload" />
                    <ToggleButton Grid.Column="1" Grid.Row="3" Click="BindReload_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="3" Text="{Binding Path=ReloadKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="4" Content="Close" />
                    <ToggleButton Grid.Column="1" Grid.Row="4" Click="BindClose_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="4" Text="{Binding Path=CloseKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="5" Content="Cycle Edge" />
                    <ToggleButton Grid.Column="1" Grid.Row="5" Click="BindCycleEdge_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="5" Text="{Binding Path=CycleEdgeKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />

                    <Label Grid.Column="0" Grid.Row="6" Content="Cycle Screen" />
                    <ToggleButton Grid.Column="1" Grid.Row="6" Click="BindCycleScreen_Click" LostFocus="BindButton_LostFocus" Style="{StaticResource HotkeyToggle}" />
                    <TextBox Grid.Column="2" Grid.Row="6" Text="{Binding Path=CycleScreenKey, Mode=OneWay, Converter={StaticResource HotkeyConverter}}" Style="{StaticResource HotkeyLabel}" />
                </Grid>
            </TabItem>
        </TabControl>
    </DockPanel>
</win:DPIAwareWindow>
